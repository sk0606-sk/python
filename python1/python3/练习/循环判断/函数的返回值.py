# def sk():
#     print('hello')
#     return 'sk'
# r=sk()
# print(r)
# print(sk())   #调用函数其实会返回两个值 一个是函数里的结果 一个是返回值 但是返回值要print才能显示出
# sk()
# a=100 #全局变量  作用域是全部
# def sk():
#     print(a)   #函数内是函数的变量它的作用域是函数作用域
#     c=15       #便宜python内变量的作用域是 大作用域内的变量 可以作用在小的作用域内 小的作用域不能作用在大的作用域内
#     def sll():  #变量的作用时间是在 程序的开始 销毁是程序的结束 平时变量并没有调用 这样可以节省内存
#         b=100 #作用域的关系就是一个套娃的关系 内部可以看到外部 外部不能看见内部 意思就是内部的函数可以用外部的变量
#         print(a)
#         print(c)
#     sll()
# sk()
a=50
def sk():
    global a
    locals()
    a=30               #函数调用找变量时先会从自己内部开始找 如果 内部没有会找全局 全局没有会报错 相同名字的变量 它在什么位置就影响那一部分
    print('函数内部',a)#如果内部函数想影响外部的全局的变量 可以 用global函数 globals是显示全局变量 locals在函数名称空间内就是显示函数内的变量
    def skk():
        print('内部的内部',a)
    skk()
sk()

print('函数外部',a)
print(locals()) #在全局名称空间内使用locals是得到的是全局变量 所有的变量是存储在名称空间内的 所有的变量存储在名称空间内都是以字典的形式存在
s=locals() #keys-values 我们也可以通过字典的增加 直接增加变量 例如 locals[a]
s[a]='sk'#直接增加变量